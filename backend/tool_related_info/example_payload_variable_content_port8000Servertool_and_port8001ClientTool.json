'Available Tools: [
    {
        "type": "function",
        "name": "tool_get_project_sheet_list_post",
        "description": "Tool Name: get_project_sheet_list\\n\\nPurpose:\\nRetrieves a list of sheets for a specific project (non-CRM workspaces) from the backend API.\\nThis is determined by the provided workspace, user email, and a RFQ_ID.\\nThe tool outputs a Markdown formatted table detailing information for each sheet.\\n\\nParameters:\\n    Workspace (str):\\n        Required. Specifies the current workspace context. Must NOT be \'CRM\'.\\n        Common values include: \'E2E\', \'Thermal\', \'PPA\'.\\n        Example: \'E2E\'\\n\\n    Email (str):\\n        Required. The email address of the user making the request for permission checks.\\n        Example: \'user@example.com\'\\n\\n    RFQ_ID (int):\\n        Required. The unique identifier for the project.\\n        Example: 123",
        "parameters": {
            "type": "object",
            "properties": {
                "Workspace": {
                    "type": "string",
                    "title": "Workspace",
                    "description": ""
                },
                "Email": {
                    "type": "string",
                    "title": "Email",
                    "description": ""
                },
                "RFQ_ID": {
                    "type": "integer",
                    "title": "Rfq Id",
                    "description": ""
                }
            },
            "required": [
                "Workspace",
                "RFQ_ID",
                "Email"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_get_program_sheet_list_post",
        "description": "Tool Name: get_program_sheet_list\\n\\nPurpose:\\nRetrieves a list of sheets for a specific program from the backend API.\\nThis is determined by the user email, a programID, and the workspace.\\nThe tool outputs a Markdown formatted table detailing information for each sheet.\\n\\nParameters:\\n    Email (str):\\n        Required. The email address of the user making the request for permission checks.\\n        Example: \'user@example.com\'\\n\\n    ProgramID (int):\\n        Required. The unique identifier for the program.\\n        Example: 456\\n        \\n    Workspace (str, optional):\\n        The workspace for the program. Defaults to \'CRM\'.\\n        For future use, this parameter can specify other workspaces.\\n        Example: \'CRM\'",
        "parameters": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string",
                    "title": "Email",
                    "description": ""
                },
                "ProgramID": {
                    "type": "integer",
                    "title": "Programid",
                    "description": ""
                },
                "Workspace": {
                    "type": "string",
                    "title": "Workspace",
                    "description": "",
                    "default": "CRM"
                }
            },
            "required": [
                "ProgramID",
                "Email"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_get_project_sheet_tool_post",
        "description": "Tool Name: get_project_sheet_tool\\n\\nPurpose:\\nRetrieves detailed cell data for a specific sheet template within a non-CRM project.\\nThe data is contextualized by workspace, section, user email, and RFQ_ID.\\nThe output is a Markdown table representing the sheet\'s content.\\n\\nParameters:\\n    Workspace (str):\\n        Required. Specifies the current workspace context. Must NOT be \'CRM\'.\\n        Example: \'E2E\'\\n\\n    Section (str):\\n        Required. The name of the section where the sheet template resides.\\n        Example: \'General Info\'\\n\\n    Email (str):\\n        Required. The email address of the user making the request for permission checks.\\n        Example: \'user@example.com\'\\n\\n    SheetTemplateID (int):\\n        Required. The unique identifier of the sheet template to retrieve.\\n        Example: 789\\n\\n    RFQ_ID (int):\\n        Required. The unique identifier for the project.\\n        Example: 123",
        "parameters": {
            "type": "object",
            "properties": {
                "Workspace": {
                    "type": "string",
                    "title": "Workspace",
                    "description": ""
                },
                "Section": {
                    "type": "string",
                    "title": "Section",
                    "description": ""
                },
                "Email": {
                    "type": "string",
                    "title": "Email",
                    "description": ""
                },
                "SheetTemplateID": {
                    "type": "integer",
                    "title": "Sheettemplateid",
                    "description": ""
                },
                "RFQ_ID": {
                    "type": "integer",
                    "title": "Rfq Id",
                    "description": ""
                }
            },
            "required": [
                "RFQ_ID",
                "SheetTemplateID",
                "Section",
                "Workspace",
                "Email"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_get_program_sheet_tool_post",
        "description": "Tool Name: get_program_sheet_tool\\n\\nPurpose:\\nRetrieves detailed cell data for a specific sheet template within a program-based workspace (typically CRM).\\nThe data is contextualized by section, user email, programID, and workspace.\\nThe output is a Markdown table representing the sheet\'s content.\\n\\nParameters:\\n    Section (str):\\n        Required. The name of the section where the sheet template resides.\\n        Example: \'General Info\'\\n\\n    Email (str):\\n        Required. The email address of the user making the request for permission checks.\\n        Example: \'user@example.com\'\\n\\n    SheetTemplateID (int):\\n        Required. The unique identifier of the sheet template to retrieve.\\n        Example: 789\\n\\n    ProgramID (int):\\n        Required. The unique identifier for the program.\\n        Example: 456\\n        \\n    Workspace (str, optional):\\n        The workspace for the program. Defaults to \'CRM\'.\\n        For future use, this parameter can specify other program-based workspaces.\\n        Example: \'CRM\'",
        "parameters": {
            "type": "object",
            "properties": {
                "Section": {
                    "type": "string",
                    "title": "Section",
                    "description": ""
                },
                "Email": {
                    "type": "string",
                    "title": "Email",
                    "description": ""
                },
                "SheetTemplateID": {
                    "type": "integer",
                    "title": "Sheettemplateid",
                    "description": ""
                },
                "ProgramID": {
                    "type": "integer",
                    "title": "Programid",
                    "description": ""
                },
                "Workspace": {
                    "type": "string",
                    "title": "Workspace",
                    "description": "",
                    "default": "CRM"
                }
            },
            "required": [
                "SheetTemplateID",
                "Section",
                "ProgramID",
                "Email"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_get_cpm_list_post",
        "description": "Tool Name: get_cpm_list\\n\\nPurpose:\\nRetrieves a list of CPMs from the backend API based on the user\'s email.\\n\\nParameters:\\n    Email (str):\\n        Required. The email address of the user making the request.\\n\\nReturns:\\n    str: A Markdown table containing the list of CPMs.",
        "parameters": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string",
                    "title": "Email",
                    "description": ""
                }
            },
            "required": [
                "Email"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_get_program_list_post",
        "description": "Tool Name: get_program_list\\n\\nPurpose:\\nRetrieves a list of programs from the backend API based on the user\'s email.\\n\\nParameters:\\n    Email (str):\\n        Required. The email address of the user making the request.\\n\\nReturns:\\n    str: A Markdown table containing the list of programs.",
        "parameters": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string",
                    "title": "Email",
                    "description": ""
                }
            },
            "required": [
                "Email"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_create_presentation_post",
        "description": "Creates a new, empty PowerPoint presentation or one with an initial title slide.\\nArgs:\\n    presentation_name_alias: A unique alias to refer to this presentation in memory.\\n                             If this alias already exists in memory, the existing presentation\\n                             will be closed and a new one will be created with this alias.\\n    title: If provided, a title slide with this title will be added.\\n    author: Sets the author metadata for the presentation.\\n    subject: Sets the subject metadata for the presentation.\\n    keywords: Sets the keywords metadata for the presentation.\\nReturns:\\n    A confirmation message.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                },
                "title": {},
                "author": {},
                "subject": {},
                "keywords": {}
            },
            "required": [
                "presentation_name_alias"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_open_presentation_post",
        "description": "Opens an existing PowerPoint presentation and assigns it an alias.\\nArgs:\\n    file_path: The full path to the .pptx file.\\n    presentation_name_alias: A unique alias for this presentation.\\nReturns:\\n    A confirmation message or error.",
        "parameters": {
            "type": "object",
            "properties": {
                "file_path": {
                    "type": "string"
                },
                "presentation_name_alias": {
                    "type": "string"
                }
            },
            "required": [
                "file_path",
                "presentation_name_alias"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_save_presentation_post",
        "description": "Saves the current state of the specified in-memory presentation to a .pptx file.\\nThis tool can be used to save progress at any point or when the user explicitly asks to \'save\'\\nwithout necessarily finishing all work. For final saving and completion of the task,\\nconsider using \'finish_and_save_presentation\'.\\nIf no filename is provided, it defaults to \'presentation_name_alias.pptx\'.\\nArgs:\\n    presentation_name_alias: The alias of the presentation to save.\\n    filename: The desired filename (e.g., \'my_presentation.pptx\').\\nReturns:\\n    The full path to the saved file or an error message.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                },
                "filename": {}
            },
            "required": [
                "presentation_name_alias"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_close_presentation_post",
        "description": "Closes an active presentation, removing it from memory. Does not save changes automatically.\\nArgs:\\n    presentation_name_alias: The alias of the presentation to close.\\nReturns:\\n    A confirmation message.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                }
            },
            "required": [
                "presentation_name_alias"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_finish_and_save_presentation_post",
        "description": "Finalizes all work on the presentation and saves it to a .pptx file.\\nUse this tool ONLY when all editing is complete, the user explicitly states they are finished, \\nand they want to conclude the session and get the final output file.\\nThis is the definitive action to complete and save the presentation.\\nArgs:\\n    presentation_name_alias: The alias of the presentation to save.\\n    filename: The desired filename (e.g., \'my_presentation.pptx\'). If None, defaults based on alias.\\nReturns:\\n    A message confirming the final save action and the path to the saved file, or an error message.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                },
                "filename": {}
            },
            "required": [
                "presentation_name_alias"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_list_active_presentations_post",
        "description": "Lists the aliases of all currently active (in-memory) presentations.",
        "parameters": {
            "type": "object",
            "properties": {},
            "required": []
        }
    },
    {
        "type": "function",
        "name": "tool_list_slide_layouts_post",
        "description": "Lists available slide layout names and their corresponding indices for the presentation.\\nArgs:\\n    presentation_name_alias: The alias of the presentation.\\nReturns:\\n    A dictionary mapping layout names to their indices.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                }
            },
            "required": [
                "presentation_name_alias"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_add_title_slide_post",
        "description": "Adds a title slide (layout 0) to the presentation.\\nArgs:\\n    presentation_name_alias: Alias of the presentation.\\n    title_text: The main title for the slide.\\n    subtitle_text: Optional subtitle text.\\n    title_font_options: Font options for the title.\\n    subtitle_font_options: Font options for the subtitle.\\nReturns:\\n    Confirmation message.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                },
                "title_text": {
                    "type": "string"
                },
                "subtitle_text": {},
                "title_font_options": {},
                "subtitle_font_options": {}
            },
            "required": [
                "presentation_name_alias",
                "title_text"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_add_title_and_content_slide_post",
        "description": "Adds a title and content slide (layout 1).\\nContent text can use newlines for paragraphs. Leading spaces can indicate bullet levels.\\nArgs:\\n    presentation_name_alias: Alias of the presentation.\\n    title_text: The title for the slide.\\n    content_text: The main content, potentially multi-line.\\n    title_font_options: Font options for the title.\\n    content_font_options: Font options for the content.\\n    content_alignment: Horizontal alignment for content text.\\n    content_vertical_anchor: Vertical anchor for content text.\\nReturns:\\n    Confirmation message.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                },
                "title_text": {
                    "type": "string"
                },
                "content_text": {
                    "type": "string"
                },
                "title_font_options": {},
                "content_font_options": {},
                "content_alignment": {},
                "content_vertical_anchor": {}
            },
            "required": [
                "presentation_name_alias",
                "title_text",
                "content_text"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_add_blank_slide_post",
        "description": "Adds a blank slide or a slide with a specified layout to the presentation.\\nArgs:\\n    presentation_name_alias: Alias of the presentation.\\n    layout_key: Key from SLIDE_LAYOUTS (e.g., \\"BLANK\\", \\"TITLE_ONLY\\"). Defaults to \\"BLANK\\".\\nReturns:\\n    Confirmation message including the index of the new slide.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                },
                "layout_key": {}
            },
            "required": [
                "presentation_name_alias"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_add_picture_slide_post",
        "description": "Adds a \\"Picture with Caption\\" slide (layout 8) or a blank slide with an image if layout 8 is not ideal.\\nArgs:\\n    presentation_name_alias: Alias of the presentation.\\n    image_path: Path to the image file.\\n    title_text: Optional title for the slide.\\n    caption_text: Optional caption for the picture.\\n    title_font_options: Font options for the title.\\n    caption_font_options: Font options for the caption.\\nReturns:\\n    Confirmation message.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                },
                "image_path": {
                    "type": "string"
                },
                "title_text": {},
                "caption_text": {},
                "title_font_options": {},
                "caption_font_options": {}
            },
            "required": [
                "presentation_name_alias",
                "image_path"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_add_slide_with_table_post",
        "description": "Adds a new slide with a table to the presentation. Dimensions are derived from table_data.\\nArgs:\\n    presentation_name_alias: Alias of the presentation.\\n    table_data: 2D list of strings for cell content. All rows must have the same number of columns.\\n    left_inches, top_inches, width_inches, height_inches: Position and size of the table shape on the new slide.\\n                                                         Important: Specify these carefully to avoid overlapping with the slide title or other automatically placed elements if using a layout with placeholders.\\n    new_slide_page_title: Optional title for the new slide.\\n    new_slide_layout_key: Optional layout key for the new slide (e.g., \\"BLANK\\", \\"TITLE_AND_CONTENT\\").\\n                          Defaults to \\"TITLE_AND_CONTENT\\" if new_slide_page_title is set, else \\"BLANK\\".\\n    first_row_header: Style the first row of the table as a header.\\n    first_col_header: (Informational, styling might be limited) Style the first column as a header.\\n    font_options: Default font options for all table cells.\\n    header_font_options: Font options for header row cells (if first_row_header is True).\\nReturns:\\n    Confirmation or error message including the index of the new slide.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                },
                "table_data": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "left_inches": {
                    "type": "number"
                },
                "top_inches": {
                    "type": "number"
                },
                "width_inches": {
                    "type": "number"
                },
                "height_inches": {
                    "type": "number"
                },
                "new_slide_page_title": {},
                "new_slide_layout_key": {},
                "first_row_header": {
                    "type": "boolean"
                },
                "first_col_header": {
                    "type": "boolean"
                },
                "font_options": {},
                "header_font_options": {}
            },
            "required": [
                "presentation_name_alias",
                "table_data",
                "left_inches",
                "top_inches",
                "width_inches",
                "height_inches"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_add_slide_with_chart_post",
        "description": "Adds a new slide with a chart to the presentation.\\nArgs:\\n    presentation_name_alias: Alias of the presentation.\\n    chart_type_str: Type of chart (e.g., \\"COLUMN_CLUSTERED\\", \\"LINE\\", \\"PIE\\").\\n    categories: List of category names (X-axis labels).\\n    series_data: List of series, where each series is a dict with \\"name\\" (str) and \\"values\\" (list of numbers).\\n    left_inches, top_inches, width_inches, height_inches: Position and size of the chart on the new slide.\\n                                                         Important: Specify these carefully to avoid overlapping with the slide title or other automatically placed elements if using a layout with placeholders.\\n    new_slide_page_title: Optional title for the new slide.\\n    new_slide_layout_key: Optional layout key for the new slide (e.g., \\"BLANK\\", \\"TITLE_AND_CONTENT\\").\\n                          Defaults to \\"TITLE_AND_CONTENT\\" if new_slide_page_title is set, else \\"BLANK\\".\\n    chart_title: Optional title for the chart itself.\\n    legend_position: Position of the legend (e.g., \\"RIGHT\\", \\"NONE\\").\\n    show_data_labels: Whether to show data labels on the chart.\\n    font_options: Font options for chart title, legend, data labels.\\n    axis_title_font_options: Font options for axis titles (if applicable).\\nReturns:\\n    Confirmation or error message including the index of the new slide.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                },
                "chart_type_str": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "series_data": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {},
                        "required": []
                    }
                },
                "left_inches": {
                    "type": "number"
                },
                "top_inches": {
                    "type": "number"
                },
                "width_inches": {
                    "type": "number"
                },
                "height_inches": {
                    "type": "number"
                },
                "new_slide_page_title": {},
                "new_slide_layout_key": {},
                "chart_title": {},
                "legend_position": {},
                "show_data_labels": {
                    "type": "boolean"
                },
                "font_options": {},
                "axis_title_font_options": {}
            },
            "required": [
                "presentation_name_alias",
                "chart_type_str",
                "categories",
                "series_data",
                "left_inches",
                "top_inches",
                "width_inches",
                "height_inches"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_add_text_box_to_slide_post",
        "description": "Adds a text box with specified text and formatting to a slide.\\nArgs:\\n    presentation_name_alias: Alias of the presentation.\\n    slide_index: 0-based index of the slide.\\n    text: Text to add. Newlines create paragraphs.\\n    left_inches, top_inches, width_inches, height_inches: Position and size.\\n    font_options: Dictionary for font styling (name, size_pt, bold, italic, color_hex, underline).\\n    alignment: Horizontal text alignment (LEFT, CENTER, RIGHT, JUSTIFY).\\n    vertical_anchor: Vertical text alignment (TOP, MIDDLE, BOTTOM).\\n    auto_size_text: Auto-size behavior (NONE, SHAPE_TO_FIT_TEXT, TEXT_TO_FIT_SHAPE).\\nReturns:\\n    Confirmation or error message.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                },
                "slide_index": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                },
                "left_inches": {
                    "type": "number"
                },
                "top_inches": {
                    "type": "number"
                },
                "width_inches": {
                    "type": "number"
                },
                "height_inches": {
                    "type": "number"
                },
                "font_options": {},
                "alignment": {},
                "vertical_anchor": {},
                "auto_size_text": {}
            },
            "required": [
                "presentation_name_alias",
                "slide_index",
                "text",
                "left_inches",
                "top_inches",
                "width_inches",
                "height_inches"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_add_image_to_slide_post",
        "description": "Adds an image to a specific slide.\\nArgs:\\n    presentation_name_alias: Alias of the presentation.\\n    slide_index: 0-based index of the slide.\\n    image_path: Path to the image file.\\n    left_inches, top_inches: Position of the top-left corner.\\n    width_inches, height_inches: Optional dimensions. If one is None, aspect ratio is preserved. If both None, original size.\\nReturns:\\n    Confirmation or error message.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                },
                "slide_index": {
                    "type": "integer"
                },
                "image_path": {
                    "type": "string"
                },
                "left_inches": {
                    "type": "number"
                },
                "top_inches": {
                    "type": "number"
                },
                "width_inches": {},
                "height_inches": {}
            },
            "required": [
                "presentation_name_alias",
                "slide_index",
                "image_path",
                "left_inches",
                "top_inches"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_delete_slide_from_presentation_post",
        "description": "Deletes a slide from the presentation.\\nArgs:\\n    presentation_name_alias: Alias of the presentation.\\n    slide_index: 0-based index of the slide to delete.\\nReturns:\\n    Confirmation or error message.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                },
                "slide_index": {
                    "type": "integer"
                }
            },
            "required": [
                "presentation_name_alias",
                "slide_index"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_set_slide_background_color_post",
        "description": "Sets the background color of a specific slide.\\nArgs:\\n    presentation_name_alias: Alias of the presentation.\\n    slide_index: 0-based index of the slide.\\n    color_hex: Hex color string (e.g., \\"FF0000\\" for red).\\nReturns:\\n    Confirmation or error message.",
        "parameters": {
            "type": "object",
            "properties": {
                "presentation_name_alias": {
                    "type": "string"
                },
                "slide_index": {
                    "type": "integer"
                },
                "color_hex": {
                    "type": "string"
                }
            },
            "required": [
                "presentation_name_alias",
                "slide_index",
                "color_hex"
            ]
        }
    }
]\n\nYour task is to choose and return the correct tool(s) from the list of available tools based on the query. Follow these guidelines:\n\n- Return only the JSON object, without any additional text or explanation.\n\n- If no tools match the query, return an empty array: \n   {\n     "tool_calls": []\n
}\n\n- If one or more tools match the query, construct a JSON response containing a "tool_calls" array with objects that include:\n   - "name": The tool\'s name.\n   - "parameters": A dictionary of required parameters and their corresponding values.\n\nThe format for the JSON response is strictly:\n{\n  "tool_calls": [\n    {
            "name": "toolName1",
            "parameters": {
                "key1": "value1"
            }
        },\n    {
            "name": "toolName2",
            "parameters": {
                "key2": "value2"
            }
        }\n
    ]\n
}'