{'tool_get_project_sheet_list_post': {'tool_id': 'server: 0', 'callable': functools.partial(<function get_tools.<locals>.make_tool_function.<locals>.tool_function at 0x0000017F7BE5C860>), 'spec': {'type': 'function', 'name': 'tool_get_project_sheet_list_post', 'description': "Tool Name: get_project_sheet_list\n\nPurpose:\nRetrieves a list of sheets for a specific project (non-CRM workspaces) from the backend API.\nThis is determined by the provided workspace, user email, and a RFQ_ID.\nThe tool outputs a Markdown formatted table detailing information for each sheet.\n\nParameters:\n    Workspace (str):\n        Required. Specifies the current workspace context. Must NOT be 'CRM'.\n        Common values include: 'E2E', 'Thermal', 'PPA'.\n        Example: 'E2E'\n\n    Email (str):\n        Required. The email address of the user making the request for permission checks.\n        Example: 'user@example.com'\n\n    RFQ_ID (int):\n        Required. The unique identifier for the project.\n        Example: 123", 'parameters': {'type': 'object', 'properties': {'Workspace': {'type': 'string', 'title': 'Workspace', 'description': ''
                    }, 'Email': {'type': 'string', 'title': 'Email', 'description': ''
                    }, 'RFQ_ID': {'type': 'integer', 'title': 'Rfq Id', 'description': ''
                    }
                }, 'required': ['RFQ_ID', 'Email', 'Workspace'
                ]
            }
        }, 'endpoint': 'http: //localhost:8000', 'api_key': 'top-secret'}, 'tool_get_program_sheet_list_post': {'tool_id': 'server:0', 'callable': functools.partial(<function get_tools.<locals>.make_tool_function.<locals>.tool_function at 0x0000017F7BE5DE40>), 'spec': {'type': 'function', 'name': 'tool_get_program_sheet_list_post', 'description': "Tool Name: get_program_sheet_list\n\nPurpose:\nRetrieves a list of sheets for a specific program from the backend API.\nThis is determined by the user email, a programID, and the workspace.\nThe tool outputs a Markdown formatted table detailing information for each sheet.\n\nParameters:\n    Email (str):\n        Required. The email address of the user making the request for permission checks.\n        Example: 'user@example.com'\n\n    ProgramID (int):\n        Required. The unique identifier for the program.\n        Example: 456\n        \n    Workspace (str, optional):\n        The workspace for the program. Defaults to 'CRM'.\n        For future use, this parameter can specify other workspaces.\n        Example: 'CRM'", 'parameters': {'type': 'object', 'properties': {'Email': {'type': 'string', 'title': 'Email', 'description': ''}, 'ProgramID': {'type': 'integer', 'title': 'Programid', 'description': ''}, 'Workspace': {'type': 'string', 'title': 'Workspace', 'description': '', 'default': 'CRM'}}, 'required': ['Email', 'ProgramID']}}, 'endpoint': 'http://localhost:8000', 'api_key': 'top-secret'}, 'tool_get_project_sheet_tool_post': {'tool_id': 'server:0', 'callable': functools.partial(<function get_tools.<locals>.make_tool_function.<locals>.tool_function at 0x0000017F7BE5C900>), 'spec': {'type': 'function', 'name': 'tool_get_project_sheet_tool_post', 'description': "Tool Name: get_project_sheet_tool\n\nPurpose:\nRetrieves detailed cell data for a specific sheet template within a non-CRM project.\nThe data is contextualized by workspace, section, user email, and RFQ_ID.\nThe output is a Markdown table representing the sheet's content.\n\nParameters:\n    Workspace (str):\n        Required. Specifies the current workspace context. Must NOT be 'CRM'.\n        Example: 'E2E'\n\n    Section (str):\n        Required. The name of the section where the sheet template resides.\n        Example: 'General Info'\n\n    Email (str):\n        Required. The email address of the user making the request for permission checks.\n        Example: 'user@example.com'\n\n    SheetTemplateID (int):\n        Required. The unique identifier of the sheet template to retrieve.\n        Example: 789\n\n    RFQ_ID (int):\n        Required. The unique identifier for the project.\n        Example: 123", 'parameters': {'type': 'object', 'properties': {'Workspace': {'type': 'string', 'title': 'Workspace', 'description': ''}, 'Section': {'type': 'string', 'title': 'Section', 'description': ''}, 'Email': {'type': 'string', 'title': 'Email', 'description': ''}, 'SheetTemplateID': {'type': 'integer', 'title': 'Sheettemplateid', 'description': ''}, 'RFQ_ID': {'type': 'integer', 'title': 'Rfq Id', 'description': ''}}, 'required': ['Workspace', 'SheetTemplateID', 'Email', 'RFQ_ID', 'Section']}}, 'endpoint': 'http://localhost:8000', 'api_key': 'top-secret'}, 'tool_get_program_sheet_tool_post': {'tool_id': 'server:0', 'callable': functools.partial(<function get_tools.<locals>.make_tool_function.<locals>.tool_function at 0x0000017F7BE5C360>), 'spec': {'type': 'function', 'name': 'tool_get_program_sheet_tool_post', 'description': "Tool Name: get_program_sheet_tool\n\nPurpose:\nRetrieves detailed cell data for a specific sheet template within a program-based workspace (typically CRM).\nThe data is contextualized by section, user email, programID, and workspace.\nThe output is a Markdown table representing the sheet's content.\n\nParameters:\n    Section (str):\n        Required. The name of the section where the sheet template resides.\n        Example: 'General Info'\n\n    Email (str):\n        Required. The email address of the user making the request for permission checks.\n        Example: 'user@example.com'\n\n    SheetTemplateID (int):\n        Required. The unique identifier of the sheet template to retrieve.\n        Example: 789\n\n    ProgramID (int):\n        Required. The unique identifier for the program.\n        Example: 456\n        \n    Workspace (str, optional):\n        The workspace for the program. Defaults to 'CRM'.\n        For future use, this parameter can specify other program-based workspaces.\n        Example: 'CRM'", 'parameters': {'type': 'object', 'properties': {'Section': {'type': 'string', 'title': 'Section', 'description': ''}, 'Email': {'type': 'string', 'title': 'Email', 'description': ''}, 'SheetTemplateID': {'type': 'integer', 'title': 'Sheettemplateid', 'description': ''}, 'ProgramID': {'type': 'integer', 'title': 'Programid', 'description': ''}, 'Workspace': {'type': 'string', 'title': 'Workspace', 'description': '', 'default': 'CRM'}}, 'required': ['Section', 'Email', 'ProgramID', 'SheetTemplateID']}}, 'endpoint': 'http://localhost:8000', 'api_key': 'top-secret'}, 'tool_get_project_list_post': {'tool_id': 'server:0', 'callable': functools.partial(<function get_tools.<locals>.make_tool_function.<locals>.tool_function at 0x0000017F7BE5E020>), 'spec': {'type': 'function', 'name': 'tool_get_project_list_post', 'description': 'Tool Name: get_project_list\n\nPurpose:\nRetrieves a list of Projects from the backend API based on the user\'s email, with a required dynamic filter.\n\nParameters:\n    Email (str):\n        Required. The email address of the user making the request.\n    Filters (dict):\n        Required. A dictionary of filters to apply.\n        Example: {"ODM": "LCFC", "Key_Program": "Hawk Point"}\n        Available columns for filtering include:\n        - RFQ_ID\n        - APM_ID\n        - OEM\n        - ODM\n        - OEMCodename\n        - Key_Program\n\nReturns:\n    str: A Markdown table containing the list of Projects.', 'parameters': {'type': 'object', 'properties': {'Email': {'type': 'string', 'title': 'Email', 'description': ''}, 'Filters': {'additionalProperties': True, 'type': 'object', 'title': 'Filters', 'description': ''}}, 'required': ['Filters', 'Email']}}, 'endpoint': 'http://localhost:8000', 'api_key': 'top-secret'}, 'tool_get_program_list_post': {'tool_id': 'server:0', 'callable': functools.partial(<function get_tools.<locals>.make_tool_function.<locals>.tool_function at 0x0000017F7BE5CC20>), 'spec': {'type': 'function', 'name': 'tool_get_program_list_post', 'description': "Tool Name: get_program_list\n\nPurpose:\nRetrieves a list of programs from the backend API based on the user's email.\nProgram list includes IP Year, Main Representing Key Program and it's Corresponding Key Program.\n\nParameters:\n    Email (str):\n        Required. The email address of the user making the request.\n\nReturns:\n    str: A Markdown table containing the list of programs.", 'parameters': {'type': 'object', 'properties': {'Email': {'type': 'string', 'title': 'Email', 'description': ''}}, 'required': ['Email']}}, 'endpoint': 'http://localhost:8000', 'api_key': 'top-secret'}, 'tool_get_component_list_post': {'tool_id': 'server:0', 'callable': functools.partial(<function get_tools.<locals>.make_tool_function.<locals>.tool_function at 0x0000017F7BE5E480>), 'spec': {'type': 'function', 'name': 'tool_get_component_list_post', 'description': "Tool Name: get_component_list\n\nPurpose:\nRetrieves a list of components from the backend API based on the CpmID and user's email.\nThe component list contains all the parts and detailed specifications of the project, such as part number, vendor name, etc.\n\nParameters:\n    CpmID (int):\n        Required. The unique identifier for the CPM.\n    Email (str):\n        Required. The email address of the user making the request for permission checks.\n\nReturns:\n    str: A Markdown table containing the list of components.", 'parameters': {'type': 'object', 'properties': {'RFQ_ID': {'type': 'integer', 'title': 'Rfq Id', 'description': ''}, 'Email': {'type': 'string', 'title': 'Email', 'description': ''}}, 'required': ['Email', 'RFQ_ID']}}, 'endpoint': 'http://localhost:8000', 'api_key': 'top-secret'}}