'Available Tools: [
    {
        "type": "function",
        "name": "tool_get_project_sheet_list_post",
        "description": "Tool Name: get_project_sheet_list\\n\\nPurpose:\\nRetrieves a list of sheets for a specific project (non-CRM workspaces) from the backend API.\\nThis is determined by the provided workspace, user email, and a RFQ_ID.\\nThe tool outputs a Markdown formatted table detailing information for each sheet.\\n\\nParameters:\\n    Workspace (str):\\n        Required. Specifies the current workspace context. Must NOT be \'CRM\'.\\n        Common values include: \'E2E\', \'Thermal\', \'PPA\'.\\n        Example: \'E2E\'\\n\\n    Email (str):\\n        Required. The email address of the user making the request for permission checks.\\n        Example: \'user@example.com\'\\n\\n    RFQ_ID (int):\\n        Required. The unique identifier for the project.\\n        Example: 123",
        "parameters": {
            "type": "object",
            "properties": {
                "Workspace": {
                    "type": "string",
                    "title": "Workspace",
                    "description": ""
                },
                "Email": {
                    "type": "string",
                    "title": "Email",
                    "description": ""
                },
                "RFQ_ID": {
                    "type": "integer",
                    "title": "Rfq Id",
                    "description": ""
                }
            },
            "required": [
                "Workspace",
                "RFQ_ID",
                "Email"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_get_program_sheet_list_post",
        "description": "Tool Name: get_program_sheet_list\\n\\nPurpose:\\nRetrieves a list of sheets for a specific program from the backend API.\\nThis is determined by the user email, a programID, and the workspace.\\nThe tool outputs a Markdown formatted table detailing information for each sheet.\\n\\nParameters:\\n    Email (str):\\n        Required. The email address of the user making the request for permission checks.\\n        Example: \'user@example.com\'\\n\\n    ProgramID (int):\\n        Required. The unique identifier for the program.\\n        Example: 456\\n        \\n    Workspace (str, optional):\\n        The workspace for the program. Defaults to \'CRM\'.\\n        For future use, this parameter can specify other workspaces.\\n        Example: \'CRM\'",
        "parameters": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string",
                    "title": "Email",
                    "description": ""
                },
                "ProgramID": {
                    "type": "integer",
                    "title": "Programid",
                    "description": ""
                },
                "Workspace": {
                    "type": "string",
                    "title": "Workspace",
                    "description": "",
                    "default": "CRM"
                }
            },
            "required": [
                "ProgramID",
                "Email"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_get_project_sheet_tool_post",
        "description": "Tool Name: get_project_sheet_tool\\n\\nPurpose:\\nRetrieves detailed cell data for a specific sheet template within a non-CRM project.\\nThe data is contextualized by workspace, section, user email, and RFQ_ID.\\nThe output is a Markdown table representing the sheet\'s content.\\n\\nParameters:\\n    Workspace (str):\\n        Required. Specifies the current workspace context. Must NOT be \'CRM\'.\\n        Example: \'E2E\'\\n\\n    Section (str):\\n        Required. The name of the section where the sheet template resides.\\n        Example: \'General Info\'\\n\\n    Email (str):\\n        Required. The email address of the user making the request for permission checks.\\n        Example: \'user@example.com\'\\n\\n    SheetTemplateID (int):\\n        Required. The unique identifier of the sheet template to retrieve.\\n        Example: 789\\n\\n    RFQ_ID (int):\\n        Required. The unique identifier for the project.\\n        Example: 123",
        "parameters": {
            "type": "object",
            "properties": {
                "Workspace": {
                    "type": "string",
                    "title": "Workspace",
                    "description": ""
                },
                "Section": {
                    "type": "string",
                    "title": "Section",
                    "description": ""
                },
                "Email": {
                    "type": "string",
                    "title": "Email",
                    "description": ""
                },
                "SheetTemplateID": {
                    "type": "integer",
                    "title": "Sheettemplateid",
                    "description": ""
                },
                "RFQ_ID": {
                    "type": "integer",
                    "title": "Rfq Id",
                    "description": ""
                }
            },
            "required": [
                "RFQ_ID",
                "SheetTemplateID",
                "Section",
                "Workspace",
                "Email"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_get_program_sheet_tool_post",
        "description": "Tool Name: get_program_sheet_tool\\n\\nPurpose:\\nRetrieves detailed cell data for a specific sheet template within a program-based workspace (typically CRM).\\nThe data is contextualized by section, user email, programID, and workspace.\\nThe output is a Markdown table representing the sheet\'s content.\\n\\nParameters:\\n    Section (str):\\n        Required. The name of the section where the sheet template resides.\\n        Example: \'General Info\'\\n\\n    Email (str):\\n        Required. The email address of the user making the request for permission checks.\\n        Example: \'user@example.com\'\\n\\n    SheetTemplateID (int):\\n        Required. The unique identifier of the sheet template to retrieve.\\n        Example: 789\\n\\n    ProgramID (int):\\n        Required. The unique identifier for the program.\\n        Example: 456\\n        \\n    Workspace (str, optional):\\n        The workspace for the program. Defaults to \'CRM\'.\\n        For future use, this parameter can specify other program-based workspaces.\\n        Example: \'CRM\'",
        "parameters": {
            "type": "object",
            "properties": {
                "Section": {
                    "type": "string",
                    "title": "Section",
                    "description": ""
                },
                "Email": {
                    "type": "string",
                    "title": "Email",
                    "description": ""
                },
                "SheetTemplateID": {
                    "type": "integer",
                    "title": "Sheettemplateid",
                    "description": ""
                },
                "ProgramID": {
                    "type": "integer",
                    "title": "Programid",
                    "description": ""
                },
                "Workspace": {
                    "type": "string",
                    "title": "Workspace",
                    "description": "",
                    "default": "CRM"
                }
            },
            "required": [
                "SheetTemplateID",
                "Section",
                "ProgramID",
                "Email"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_get_cpm_list_post",
        "description": "Tool Name: get_cpm_list\\n\\nPurpose:\\nRetrieves a list of CPMs from the backend API based on the user\'s email.\\n\\nParameters:\\n    Email (str):\\n        Required. The email address of the user making the request.\\n\\nReturns:\\n    str: A Markdown table containing the list of CPMs.",
        "parameters": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string",
                    "title": "Email",
                    "description": ""
                }
            },
            "required": [
                "Email"
            ]
        }
    },
    {
        "type": "function",
        "name": "tool_get_program_list_post",
        "description": "Tool Name: get_program_list\\n\\nPurpose:\\nRetrieves a list of programs from the backend API based on the user\'s email.\\n\\nParameters:\\n    Email (str):\\n        Required. The email address of the user making the request.\\n\\nReturns:\\n    str: A Markdown table containing the list of programs.",
        "parameters": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string",
                    "title": "Email",
                    "description": ""
                }
            },
            "required": [
                "Email"
            ]
        }
    }
]\n\nYour task is to choose and return the correct tool(s) from the list of available tools based on the query. Follow these guidelines:\n\n- Return only the JSON object, without any additional text or explanation.\n\n- If no tools match the query, return an empty array: \n   {\n     "tool_calls": []\n
}\n\n- If one or more tools match the query, construct a JSON response containing a "tool_calls" array with objects that include:\n   - "name": The tool\'s name.\n   - "parameters": A dictionary of required parameters and their corresponding values.\n\nThe format for the JSON response is strictly:\n{\n  "tool_calls": [\n    {
            "name": "toolName1",
            "parameters": {
                "key1": "value1"
            }
        },\n    {
            "name": "toolName2",
            "parameters": {
                "key2": "value2"
            }
        }\n
    ]\n
}'